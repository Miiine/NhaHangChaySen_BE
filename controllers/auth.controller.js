import { db } from "../db.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import nodemailer from "nodemailer";
import crypto from "crypto";

import { OAuth2Client } from "google-auth-library";
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

// C·∫•u h√¨nh Nodemailer ƒë·ªÉ g·ª≠i email
const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

export const register = async (req, res) => {
    const { email, password, username } = req.body;
    try {
        const [rows] = await db.execute(
            "SELECT maTaiKhoan FROM TAIKHOAN WHERE email = ?",
            [email]
        );
        if (rows.length > 0) {
            return res.status(409).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!" });
        }
        // M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u v√†o DB
        const hashed = await bcrypt.hash(password, 10);
        // T·∫°o m√£ x√°c nh·∫≠n (activation token) ng·∫´u nhi√™n
        const activationToken = crypto.randomBytes(32).toString("hex");
        await db.execute(
            "INSERT INTO TAIKHOAN (email, matKhau, tenTaiKhoan, activationToken, isActive) VALUES (?, ?, ?, ?, ?)",
            [email, hashed, username, activationToken, false]
        );

        // G·ª≠i email k√≠ch ho·∫°t
        // const activationLink = `http://localhost:5173/activate-account?token=${activationToken}`;
        const activationLink = `https://nhahangchaysen-fe.onrender.com/activate-account?token=${activationToken}`;
        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "K√≠ch ho·∫°t t√†i kho·∫£n c·ªßa b·∫°n",
            html: `<p>Click v√†o li√™n k·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n c·ªßa b·∫°n:</p><p><a href="${activationLink}">K√≠ch ho·∫°t t√†i kho·∫£n</a></p>`,
        };
        await transporter.sendMail(mailOptions);

        res.status(201).json({
            message:
                "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n.",
        });
    } catch (err) {
        console.error("üî• L·ªói t·∫°i register:", err);
        res.status(500).json({ message: "L·ªói server khi ƒëƒÉng k√Ω" });
    }
};

export const login = async (req, res) => {
    const { email, password } = req.body;
    try {
        const [rows] = await db.execute(
            "SELECT * FROM TAIKHOAN WHERE email = ?",
            [email]
        );
        if (rows.length === 0)
            return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });

        const user = rows[0];

        // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
        if (user.trangThai === "khoa") {
            return res.status(403).json({
                message:
                    "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá v·ªõi nh√† h√†ng ƒë·ªÉ m·ªü l·∫°i t√†i kho·∫£n.",
            });
        }

        // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t ch∆∞a
        if (!user.isActive) {
            return res.status(403).json({
                message:
                    "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t.",
            });
        }

        const isMatch = await bcrypt.compare(password, user.matKhau);
        if (!isMatch) return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });

        const accessToken = jwt.sign(
            {
                id: user.maTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
        );

        const refreshToken = jwt.sign(
            {
                id: user.maTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            process.env.JWT_REFRESH_SECRET,
            { expiresIn: "7d" }
        );

        res.json({
            user: {
                id: user.maTaiKhoan,
                username: user.tenTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            token: accessToken,
            refreshToken: refreshToken,
        });
    } catch (err) {
        console.error("üî• L·ªói t·∫°i login:", err); // Th√™m log
        res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p" });
    }
};

export const refresh = async (req, res) => {
    const { refreshToken } = req.body;
    if (!refreshToken)
        return res.status(401).json({ message: "Kh√¥ng c√≥ refresh token" });

    try {
        const decoded = jwt.verify(
            refreshToken,
            process.env.JWT_REFRESH_SECRET
        );
        const newAccessToken = jwt.sign(
            { id: decoded.id },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
        );
        res.json({ token: newAccessToken });
    } catch (err) {
        console.error("üî• L·ªói t·∫°i refresh token:", err); // Th√™m log
        res.status(403).json({
            message: "Refresh token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!",
        });
    }
};

export const googleLogin = async (req, res) => {
    const { token } = req.body;

    try {
        // X√°c th·ª±c token Google
        const ticket = await client.verifyIdToken({
            idToken: token,
            audience: process.env.GOOGLE_CLIENT_ID,
        });

        const payload = ticket.getPayload();

        // L·∫•y email v√† th√¥ng tin user t·ª´ payload
        const email = payload.email;
        const username = payload.name;

        // Ki·ªÉm tra user trong DB, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
        const [rows] = await db.execute(
            "SELECT * FROM TAIKHOAN WHERE email = ?",
            [email]
        );

        let user;
        if (rows.length === 0) {
            // T·∫°o user m·ªõi v·ªõi password ng·∫´u nhi√™n ho·∫∑c null
            const [result] = await db.execute(
                "INSERT INTO TAIKHOAN (email, tenTaiKhoan, matKhau, maVaiTro, SDT, isActive) VALUES (?, ?, ?, ?, ?, ?)",
                [email, username, null, 1, null, true]
            );
            const maMonAn = result.insertId;

            // Sau khi insert, l·∫•y ID v√† ch·ªçn l·∫°i to√†n b·ªô th√¥ng tin user
            const [newUserRows] = await db.execute(
                "SELECT * FROM TAIKHOAN WHERE maTaiKhoan = ?",
                [maMonAn]
            );

            user = newUserRows[0];

            console.log("User ID:", user.maTaiKhoan);
            console.log("User Username:", user.tenTaiKhoan);
        } else {
            user = rows[0];
        }

        // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
        if (user.trangThai === "khoa") {
            return res.status(403).json({
                message:
                    "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá v·ªõi nh√† h√†ng ƒë·ªÉ m·ªü l·∫°i t√†i kho·∫£n.",
            });
        }

        // T·∫°o JWT cho app
        const accessToken = jwt.sign(
            {
                id: user.maTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
        );
        const refreshToken = jwt.sign(
            {
                id: user.maTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            process.env.JWT_REFRESH_SECRET,
            { expiresIn: "7d" }
        );

        res.json({
            user: {
                id: user.maTaiKhoan,
                username: user.tenTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            token: accessToken,
            refreshToken,
        });
    } catch (err) {
        console.error("L·ªói x√°c th·ª±c Google:", err);
        res.status(401).json({ message: "Token Google kh√¥ng h·ª£p l·ªá" });
    }
};

export const facebookLogin = async (req, res) => {
    const { accessToken } = req.body;
    if (!accessToken) {
        return res
            .status(400)
            .json({ message: "Kh√¥ng c√≥ access token Facebook" });
    }

    try {
        // Ki·ªÉm tra token v·ªõi Facebook
        const fbResponse = await fetch(
            `https://graph.facebook.com/me?fields=id,name,email&access_token=${accessToken}`
        );
        const fbData = await fbResponse.json();

        if (fbData.error) {
            return res
                .status(401)
                .json({ message: "Access token Facebook kh√¥ng h·ª£p l·ªá" });
        }

        const { email, name } = fbData;

        // Ki·ªÉm tra user trong DB, t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
        const [rows] = await db.execute(
            "SELECT * FROM TAIKHOAN WHERE email = ?",
            [email]
        );
        let user;
        if (rows.length === 0) {
            const [result] = await db.execute(
                "INSERT INTO TAIKHOAN (email, tenTaiKhoan, matKhau, maVaiTro, SDT, isActive) VALUES (?, ?, ?, ?, ?, ?)",
                [email, name, null, 1, null, true]
            );
            user = {
                id: result.insertId,
                email,
                username: name,
                maVaiTro: 1,
                SDT: null,
            };
        } else {
            user = rows[0];
        }

        // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
        if (user.trangThai === "khoa") {
            return res.status(403).json({
                message:
                    "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá v·ªõi nh√† h√†ng ƒë·ªÉ m·ªü l·∫°i t√†i kho·∫£n.",
            });
        }

        // T·∫°o JWT app
        const accessTokenApp = jwt.sign(
            {
                id: user.maTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
        );
        const refreshTokenApp = jwt.sign(
            {
                id: user.maTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            process.env.JWT_REFRESH_SECRET,
            { expiresIn: "7d" }
        );

        res.json({
            user: {
                id: user.maTaiKhoan,
                username: user.tenTaiKhoan,
                email: user.email,
                maVaiTro: user.maVaiTro,
                SDT: user.SDT,
            },
            token: accessTokenApp,
            refreshToken: refreshTokenApp,
        });
    } catch (err) {
        console.error("L·ªói ƒëƒÉng nh·∫≠p Facebook:", err);
        res.status(500).json({ message: "L·ªói server khi ƒëƒÉng nh·∫≠p Facebook" });
    }
};

export const activateAccount = async (req, res) => {
    const { token } = req.query;

    try {
        const [rows] = await db.execute(
            "SELECT * FROM TAIKHOAN WHERE activationToken = ?",
            [token]
        );

        if (rows.length === 0) {
            return res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
        }

        const user = rows[0];

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n th√†nh 'active'
        await db.execute(
            "UPDATE TAIKHOAN SET isActive = ? WHERE maTaiKhoan = ?",
            [true, user.maTaiKhoan]
        );

        res.json({ message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!" });
    } catch (error) {
        console.error("L·ªói k√≠ch ho·∫°t t√†i kho·∫£n:", error);
        res.status(500).json({ message: "L·ªói server khi k√≠ch ho·∫°t t√†i kho·∫£n" });
    }
};

export const requestPasswordReset = async (req, res) => {
    const { email } = req.body;

    try {
        const [rows] = await db.execute(
            "SELECT maTaiKhoan FROM TAIKHOAN WHERE email = ?",
            [email]
        );

        if (rows.length === 0) {
            return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
        }

        // T·∫°o token reset ng·∫´u nhi√™n, 32 bytes hex
        const resetToken = crypto.randomBytes(32).toString("hex");

        // T·∫°o th·ªùi gian h·∫øt h·∫°n, sau 1 gi·ªù
        const expireTime = new Date(Date.now() + 3600 * 1000);

        // L∆∞u token v√† th·ªùi h·∫°n v√†o database
        await db.execute(
            "UPDATE TAIKHOAN SET resetToken = ?, resetTokenExpire = ? WHERE email = ?",
            [resetToken, expireTime, email]
        );

        // G·ª≠i email ch·ª©a link reset
        // const resetLink = `http://localhost:5173/reset-password?token=${resetToken}`;
        const resetLink = `https://nhahangchaysen-fe.onrender.com/reset-password?token=${resetToken}`;
        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
            html: `
        <p>B·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y v√¨ b·∫°n (ho·∫∑c ai ƒë√≥) ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
        <p>Click v√†o li√™n k·∫øt d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (link ch·ªâ c√≥ hi·ªáu l·ª±c trong 1 gi·ªù):</p>
        <p><a href="${resetLink}">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a></p>
        <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, h√£y b·ªè qua email n√†y.</p>
      `,
        };

        await transporter.sendMail(mailOptions);

        res.json({
            message:
                "ƒê√£ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.",
        });
    } catch (err) {
        console.error("L·ªói requestPasswordReset:", err);
        res.status(500).json({
            message: "L·ªói server khi y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
        });
    }
};

export const resetPassword = async (req, res) => {
    const { token, newPassword } = req.body;

    try {
        const [rows] = await db.execute(
            "SELECT * FROM TAIKHOAN WHERE resetToken = ? AND resetTokenExpire > NOW()",
            [token]
        );

        if (rows.length === 0) {
            return res.status(400).json({
                message: "Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
            });
        }

        const user = rows[0];

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u, ƒë·ªìng th·ªùi x√≥a token reset
        await db.execute(
            "UPDATE TAIKHOAN SET matKhau = ?, resetToken = NULL, resetTokenExpire = NULL WHERE maTaiKhoan = ?",
            [hashedPassword, user.maTaiKhoan]
        );

        res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói resetPassword:", err);
        res.status(500).json({ message: "L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u" });
    }
};
